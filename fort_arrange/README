Fort Arrange

================================================================================
Summary
--------------------------------------------------------------------------------
Fort Arrange is a Fortran module for the arrangement of numeric arrays and
matrices.  Fort Arrange has been designed to provide a simple and flexible 
interface to efficient arrangement tools including sorting and permutation.

Fort Arrange is a component of the FortLab project.  To use Fort Arrange you can
get the entire FortLab project or just get the Fort Arrange module.  Makefiles
are provided separately for Fort Arrange and FortLab.

Fort Arrange's core is a hybrid sort algorithm that uses an interchange sort for
small lists and a quick sort for larger lists.
================================================================================

================================================================================
Notes
--------------------------------------------------------------------------------
Comments, feedback, and pull request are warmly welcomed.

The sort algorithm uses a hybrid quick-interchange sort.  Interchange sort is
used for smaller list and a recursive quick sort is used for larger lists.  I am
currently test a flat quick sort algorithm.  The default is to use interchange
sort for any list of 20 or less elements.  This threshold can be set with the
subroutine set_max_interchange_sort_size.  The quick sort uses the mean of the
first and last element as the pivot.  
  
Fort Arrange uses BLAS.  If you do not have a BLAS implementation, a non 
optimized version can be found at www.netlib.org/blas/.  For free optimized
implementations consider ATLAS (www.math-atlas.sourceforge.net/) or OpenBLAS
(https://github.com/xianyi/OpenBLAS).  

Fort Arrange currently supports the following data types:
  * integer
  * real
  * double precision
I have not added complex data types because I do not have much experience 
working with them in Fortran and therefore do not know how to write efficient
code for them.  If anyone extends the code to complex data types please consider 
submitting your code to be included in the Fort Arrange project.

Testing has been done using current versions of gfortran and ifort.
================================================================================

================================================================================
Installation
--------------------------------------------------------------------------------
A make file has been provided to build a static library.  The library is placed
in the sub folder lib and the mod file is placed in the sub folder headers.  To
use Fort Arrange link to the library, include the mod file.  The Makefile has
been set up for ifort, but is easy to modify for other compilers.  This is some
documentation in the Makefile and this will improve with time.

If you can not get the makefile to work or if you do not to use Fort Arrange as
a static library is easy to reference.  Simply include the file fort_arrange.f90
and link to a blas library.
================================================================================

================================================================================
Use
--------------------------------------------------------------------------------

is_sorted - Check if a vector is sorted
--------------------------------------------------------------------------------
  * function is_sorted(VEC)
    Check if vector VEC is sorted.  Returns integer 0 if VEC is sorted, 
    otherwise it returns the first index such that VEC(i) < VEC(i - 1).

is_unique - Are the elements of vector unique
--------------------------------------------------------------------------------
  * function is_unique(VEC)
    Return logical which is true when all elements of vector VEC are unique.

permute - Permute vector or matrix
--------------------------------------------------------------------------------
  * subroutine permute(MAP,VEC)
    Permute a vector VEC in place using map MAP.
  
  * subroutine permute(MAP,VEC,VEC_OUT)
    Permute a vector VEC to vector VEC_OUT using map MAP.
  
  * subroutine permute(MAP,MAT)
    Permute a matrix MAT in place using map MAP.
  
  * subroutine permute(MAP,MAT,MAT_OUT)
    Permute a matrix MAT to matrix MAT_OUTT using map MAP.
  
set_max_interchange_sort_size - Set Max Interchange Sort Size
--------------------------------------------------------------------------------
  * function set_max_interchange_sort_size(N) 
    Set max interchange sort size to integer N.  This will cause sort to use 
    interchange sort for all lists less than or equal to N elements in length.
    Please note that even when a list larger than N is sorted, interchange sort 
    will be used every time quick sort makes a partition of N elements or less.

sort - Sorting
--------------------------------------------------------------------------------
  * subroutine sort(VEC)
    Sort vector VEC.

  * subroutine sort(VEC,MAP)
    Sort vector VEC and also get the map MAP of the sorting.

  * subroutine sort(MAT)
    Sort a matrix MAT by the first column.

  * subroutine sort(MAT,K)
    Sort a matrix MAT by the Kth column.

unique - Find unique elements of a vector.
--------------------------------------------------------------------------------
  * function unique(VEC,VEC_OUT)
    Set allocatable vector VEC_OUT to be a unique sorted list of elements of
    vector VEC.    

  * function unique(VEC,VEC_OUT,MAP)
    Set allocatable vector VEC_OUT to be a unique sorted list of elements of 
    vector VEC and set map MAP to be the mapping vector from VEC to VEC_OUT.

================================================================================

================================================================================
Future
--------------------------------------------------------------------------------

Short Term
--------------------------------------------------------------------------------
Optimize use of BLAS calls to XCOPY.  Currently they are faster than using just
ifort or gfortran's array copy feature; however, there may be room to optimize
the calls.

Extend the permute in place subroutines to work when MAP is shorter than VEC or
MAT, leaving all the other elements un extended.

Longer Term
--------------------------------------------------------------------------------
Allow multi column matrix sorts.

Allow for reverse sort.

Added in string sorting.  I am debating if this should be part of a separate
string library.  The biggest problem with adding these tool into this library
is that it would create issues with some compilers.  The 2003 and 2008 Fortran
standards have improved the functionality around string and does not make since
to develop any new tools that do not take advantage of these features but some
compilers have not yet implemented some of these futures including gfortran. 
================================================================================

